// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: gambar.sql

package db

import (
	"context"

	"github.com/lib/pq"
)

const listMobilNew = `-- name: ListMobilNew :many
SELECT m.id, m.nama, gm.url, gm.id  FROM Mobil m
inner join gambar_mobil gm on gm.mobil_id  = m.id
ORDER BY gm.id, m.id
`

type ListMobilNewRow struct {
	ID   int64  `json:"id"`
	Nama string `json:"nama"`
	Url  string `json:"url"`
	ID_2 int64  `json:"id_2"`
}

func (q *Queries) ListMobilNew(ctx context.Context) ([]ListMobilNewRow, error) {
	rows, err := q.db.QueryContext(ctx, listMobilNew)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListMobilNewRow{}
	for rows.Next() {
		var i ListMobilNewRow
		if err := rows.Scan(
			&i.ID,
			&i.Nama,
			&i.Url,
			&i.ID_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMobilNewB = `-- name: ListMobilNewB :many
SELECT id, nama, deskripsi, kategori_id, gambar, user_id, trf_6jam, trf_12jam, trf_24jam, seat, top_speed, max_power, pintu, gigi, created_at FROM Mobil m
ORDER BY id
`

func (q *Queries) ListMobilNewB(ctx context.Context) ([]Mobil, error) {
	rows, err := q.db.QueryContext(ctx, listMobilNewB)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Mobil{}
	for rows.Next() {
		var i Mobil
		if err := rows.Scan(
			&i.ID,
			&i.Nama,
			&i.Deskripsi,
			&i.KategoriID,
			pq.Array(&i.Gambar),
			&i.UserID,
			&i.Trf6jam,
			&i.Trf12jam,
			&i.Trf24jam,
			&i.Seat,
			&i.TopSpeed,
			&i.MaxPower,
			&i.Pintu,
			&i.Gigi,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
